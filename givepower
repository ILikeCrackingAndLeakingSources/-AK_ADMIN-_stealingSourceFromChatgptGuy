local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local localPlayer = Players.LocalPlayer -- Store the script executor

local warnCommand = '/warns'
local spamWarnCommand = '/spamwarns'
local unspamCommand = '/unspam'
local givePowerCommand = '/givepower'
local removePowerCommand = '/removepower'  -- New command
local cmdsCommand = '/cmds'
local playersWithPower = {}
local activeSpamWarns = {}
local blacklist = {}
local maxAttempts = 4
local notificationLimit = 100
local notificationInterval = 0.1
local oldChat = false

-- Check if the old chat system is being used
if ReplicatedStorage:FindFirstChild('DefaultChatSystemChatEvents') then
    oldChat = true
end

-- Function to send a message
local function Chat(msg, player)
    if oldChat then
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(msg, "All")
    else
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync(msg)
    end
end

-- Function to spam warn all players
local function spamWarnAll(player)
    while activeSpamWarns[player.Name] do
        local sentNotifications = 0
        
        for _, victimPlayer in ipairs(Players:GetPlayers()) do
            if not activeSpamWarns[player.Name] then
                return
            end
            
            if sentNotifications < notificationLimit then
                ReplicatedStorage.Notification.PlayerSelectedEvent:FireServer(victimPlayer.Name)
                sentNotifications = sentNotifications + 1
            else
                break
            end
        end

        wait(notificationInterval)
    end
end

-- Function to spam warn a specific player
local function spamWarnPlayer(player, targetPlayer)
    while activeSpamWarns[targetPlayer.Name] do
        local sentNotifications = 0
        
        if sentNotifications < notificationLimit then
            ReplicatedStorage.Notification.PlayerSelectedEvent:FireServer(targetPlayer.Name)
            sentNotifications = sentNotifications + 1
        end

        wait(notificationInterval)
    end
end

-- Function to track blacklist attempts
local function trackBlacklist(player)
    if not blacklist[player.Name] then
        blacklist[player.Name] = { attempts = 0, isBlacklisted = false }
    end

    local data = blacklist[player.Name]
    data.attempts = data.attempts + 1

    if data.attempts >= maxAttempts then
        data.isBlacklisted = true
        Chat("üö´ You have been blacklisted, " .. player.DisplayName .. ".", player)
        Chat(player.DisplayName .. " has been blacklisted for unauthorized command usage.", player)
    else
        Chat("‚ùå " .. player.DisplayName .. ", you are not authorized to use this command. Attempt " .. data.attempts .. "/" .. maxAttempts .. ".", player)
    end
end

-- Function to handle chat commands
local function onPlayerChatted(player, message)
    if blacklist[player.Name] and blacklist[player.Name].isBlacklisted then
        return -- No more messages after player is blacklisted
    end

    local args = message:split(" ")
    local command = string.lower(args[1])

    -- Ensure only the script executor can use /givepower and /removepower
    if command == string.lower(givePowerCommand) and player == localPlayer and args[2] then
        local targetPlayer = Players:FindFirstChild(args[2])
        if not targetPlayer then
            for _, p in ipairs(Players:GetPlayers()) do
                if string.lower(p.DisplayName) == string.lower(args[2]) then
                    targetPlayer = p
                    break
                end
            end
        end
        
        if targetPlayer then
            if not playersWithPower[targetPlayer.Name] then
                playersWithPower[targetPlayer.Name] = true
                Chat("‚ú® " .. targetPlayer.DisplayName .. " has been given power by " .. player.DisplayName .. ".", targetPlayer)
                Chat("Type '/cmds' to see your available commands.", targetPlayer)
            else
                Chat("‚ö†Ô∏è " .. targetPlayer.DisplayName .. " already has power.", player)
            end
        else
            Chat("‚ùå Player not found: " .. args[2], player)
        end
    elseif command == string.lower(removePowerCommand) and player == localPlayer and args[2] then
        local targetPlayer = Players:FindFirstChild(args[2])
        if not targetPlayer then
            for _, p in ipairs(Players:GetPlayers()) do
                if string.lower(p.DisplayName) == string.lower(args[2]) then
                    targetPlayer = p
                    break
                end
            end
        end
        
        if targetPlayer then
            if playersWithPower[targetPlayer.Name] then
                playersWithPower[targetPlayer.Name] = nil
                Chat("‚ö° " .. targetPlayer.DisplayName .. " has had their power removed by " .. player.DisplayName .. ".", targetPlayer)
            else
                Chat("‚ö†Ô∏è " .. targetPlayer.DisplayName .. " doesn't have power.", player)
            end
        else
            Chat("‚ùå Player not found: " .. args[2], player)
        end
    elseif command == string.lower(warnCommand) then
        if playersWithPower[player.Name] then
            if args[2] and args[2] == "all" then
                for _, victimPlayer in ipairs(Players:GetPlayers()) do
                    ReplicatedStorage.Notification.PlayerSelectedEvent:FireServer(victimPlayer.Name)
                end
                Chat("‚ö†Ô∏è You warned everyone in the server.", player)
            elseif args[2] then
                local victimPlayer = Players:FindFirstChild(args[2])
                if not victimPlayer then
                    for _, p in ipairs(Players:GetPlayers()) do
                        if string.lower(p.DisplayName) == string.lower(args[2]) then
                            victimPlayer = p
                            break
                        end
                    end
                end
                if victimPlayer then
                    ReplicatedStorage.Notification.PlayerSelectedEvent:FireServer(victimPlayer.Name)
                    Chat("‚ö†Ô∏è You warned " .. victimPlayer.DisplayName .. ".", player)
                else
                    Chat("‚ùå Player not found: " .. args[2], player)
                end
            else
                Chat("‚ö†Ô∏è Specify a player to warn or use '/warns all' to warn everyone.", player)
            end
        else
            trackBlacklist(player)
        end
    elseif command == string.lower(spamWarnCommand) then
        if args[2] == "all" and playersWithPower[player.Name] then
            if not activeSpamWarns[player.Name] then
                activeSpamWarns[player.Name] = true
                Chat("‚ö° You are now spam-warning all players.", player)
                spamWarnAll(player)
            else
                Chat("‚ö†Ô∏è You are already spam-warning all players.", player)
            end
        elseif args[2] and playersWithPower[player.Name] then
            local targetPlayer = Players:FindFirstChild(args[2])
            if not targetPlayer then
                for _, p in ipairs(Players:GetPlayers()) do
                    if string.lower(p.DisplayName) == string.lower(args[2]) then
                        targetPlayer = p
                        break
                    end
                end
            end
            if targetPlayer then
                if not activeSpamWarns[targetPlayer.Name] then
                    activeSpamWarns[targetPlayer.Name] = true
                    Chat("‚ö° You are now spam-warning " .. targetPlayer.DisplayName .. ".", player)
                    spamWarnPlayer(player, targetPlayer)
                else
                    Chat("‚ö†Ô∏è " .. targetPlayer.DisplayName .. " is already being spam-warned.", player)
                end
            else
                Chat("‚ùå Player not found: " .. args[2], player)
            end
        else
            trackBlacklist(player)
        end
    elseif command == string.lower(unspamCommand) then
        if playersWithPower[player.Name] then
            if args[2] then
                local targetPlayer = Players:FindFirstChild(args[2])
                if not targetPlayer then
                    for _, p in ipairs(Players:GetPlayers()) do
                        if string.lower(p.DisplayName) == string.lower(args[2]) then
                            targetPlayer = p
                            break
                        end
                    end
                end
                
                if targetPlayer and activeSpamWarns[targetPlayer.Name] then
                    activeSpamWarns[targetPlayer.Name] = false
                    Chat("‚õî You have stopped spam-warnings for " .. targetPlayer.DisplayName .. ".", player)
                else
                    Chat("‚ùå " .. (targetPlayer and targetPlayer.DisplayName or "Player not found: " .. args[2]), player)
                end
            else
                for spamOwner, _ in pairs(activeSpamWarns) do
                    if activeSpamWarns[spamOwner] then
                        activeSpamWarns[spamOwner] = false
                    end
                end
                Chat("‚õî You have stopped all spam-warnings.", player)
            end
        else
            trackBlacklist(player)
        end
    elseif command == string.lower(cmdsCommand) then
        if playersWithPower[player.Name] then
            Chat("üìú Your available commands:\nüìú /warns [player]\nüìú /warns all\nüìú /spamwarns all\nüìú /spamwarns [player]\nüìú /unspam\nüìú /givepower [player]\nüìú /removepower [player]\nüìú /cmds", player)
        else
            Chat("‚ùå You are not authorized to view the command list.", player)
        end
    end
end

Players.PlayerAdded:Connect(function(player)
    player.Chatted:Connect(function(message)
        onPlayerChatted(player, message)
    end)
end)

for _, player in ipairs(Players:GetPlayers()) do
    player.Chatted:Connect(function(message)
        onPlayerChatted(player, message)
    end)
end
