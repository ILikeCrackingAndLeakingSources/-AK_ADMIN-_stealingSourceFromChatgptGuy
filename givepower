local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local warnCommand = '/warns'
local spamWarnCommand = '/spamwarns'
local unspamCommand = '/unspam'
local givePowerCommand = '/givepower'
local cmdsCommand = '/cmds' -- New command to show available commands
local playersWithPower = {}
local activeSpamWarns = {}  -- Table to track active spam warns
local notificationLimit = 100 -- Set the maximum number of notifications per cycle
local notificationInterval = 0.1 -- Time interval between cycles (in seconds)
local oldChat = false

-- Check if the old chat system is being used
if ReplicatedStorage:FindFirstChild('DefaultChatSystemChatEvents') then
    oldChat = true
end

-- Function to send a message
local function Chat(msg, player)
    if oldChat then
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(msg, "All")
    else
        -- Assuming TextChatService is already initialized and used
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync(msg)
    end
end

local function spamWarnAll(player)
    while activeSpamWarns[player.Name] do
        local sentNotifications = 0 -- Reset notification count for each cycle
        
        for _, victimPlayer in ipairs(Players:GetPlayers()) do
            if not activeSpamWarns[player.Name] then -- Stop if the player called /unspam
                return
            end
            
            if sentNotifications < notificationLimit then
                ReplicatedStorage.Notification.PlayerSelectedEvent:FireServer(victimPlayer.Name)
                sentNotifications = sentNotifications + 1
            else
                break
            end
        end

        wait(notificationInterval) -- Wait for the specified interval before the next cycle
    end
end

local function onPlayerChatted(player, message)
    local args = message:split(" ")
    local command = string.lower(args[1])

    if command == string.lower(givePowerCommand) and args[2] then
        local targetPlayer = Players:FindFirstChild(args[2])
        if not targetPlayer then
            for _, p in ipairs(Players:GetPlayers()) do
                if string.lower(p.DisplayName) == string.lower(args[2]) then
                    targetPlayer = p
                    break
                end
            end
        end
        
        if targetPlayer then
            if not playersWithPower[targetPlayer.Name] then
                playersWithPower[targetPlayer.Name] = true
                Chat(targetPlayer.DisplayName .. ", you have been given warning power by " .. player.DisplayName, targetPlayer)
                -- Tell the player what commands they can use
                Chat("You can now use the following commands: /warns [player], /warns all, /spamwarns all, /unspam, /cmds.", targetPlayer)
            end
            return
        else
            Chat("Player not found: " .. args[2], player)
            return
        end
    elseif command == string.lower(warnCommand) then
        if playersWithPower[player.Name] then
            if args[2] and args[2] == "all" then
                -- Warn all players
                local sentNotifications = 0
                for _, victimPlayer in ipairs(Players:GetPlayers()) do
                    if sentNotifications < notificationLimit then
                        ReplicatedStorage.Notification.PlayerSelectedEvent:FireServer(victimPlayer.Name)
                        sentNotifications = sentNotifications + 1
                    else
                        break
                    end
                end
                Chat("You have warned everyone in the server.", player)
            elseif args[2] then
                -- Warn a specific player
                local victimPlayer = Players:FindFirstChild(args[2])
                if not victimPlayer then
                    for _, p in ipairs(Players:GetPlayers()) do
                        if string.lower(p.DisplayName) == string.lower(args[2]) then
                            victimPlayer = p
                            break
                        end
                    end
                end
                
                if victimPlayer then
                    ReplicatedStorage.Notification.PlayerSelectedEvent:FireServer(victimPlayer.Name)
                    Chat("You have warned " .. victimPlayer.DisplayName .. ".", player)
                else
                    Chat("Player not found: " .. args[2], player)
                end
            else
                Chat("Specify a player to warn or use '/warns all' to warn everyone.", player)
            end
        else
            Chat("You do not have permission to warn players.", player)
        end
    elseif command == string.lower(spamWarnCommand) and args[2] == "all" then
        if playersWithPower[player.Name] then
            if not activeSpamWarns[player.Name] then
                activeSpamWarns[player.Name] = true
                Chat("You are now spam-warning all players in the server.", player)
                spamWarnAll(player) -- Start the spam warn loop
            else
                Chat("You are already spam-warning all players.", player)
            end
        else
            Chat("You do not have permission to spam warn players.", player)
        end
    elseif command == string.lower(unspamCommand) then
        if playersWithPower[player.Name] and activeSpamWarns[player.Name] then
            activeSpamWarns[player.Name] = false
            Chat("You have stopped spam-warning all players.", player)
        else
            Chat("There is no active spam-warning to stop.", player)
        end
    elseif command == string.lower(cmdsCommand) then -- Handle the /cmds command
        if playersWithPower[player.Name] then
            Chat("Available commands: /warns [player], /warns all, /spamwarns all, /unspam, /cmds.", player)
        else
            Chat("You do not have permission to view the command list.", player)
        end
    end
end

Players.PlayerAdded:Connect(function(player)
    player.Chatted:Connect(function(message)
        onPlayerChatted(player, message)
    end)
end)

for _, player in ipairs(Players:GetPlayers()) do
    player.Chatted:Connect(function(message)
        onPlayerChatted(player, message)
    end)
end
