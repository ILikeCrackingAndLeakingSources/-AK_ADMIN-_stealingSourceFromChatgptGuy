local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
local targetHead = nil
local targetPlayer = nil

local FOLLOW_DISTANCE = -0.7
local HEIGHT_OFFSET = 0.8
local TWEEN_SPEED = 0.08
local TWEEN_STYLE = Enum.EasingStyle.Linear
local TWEEN_DIRECTION = Enum.EasingDirection.Out
local APPROACH_TWEEN_SPEED = 0.15
local APPROACH_TWEEN_STYLE = Enum.EasingStyle.Quad

getgenv().facefuckactive = false

-- Enhanced function to completely disable all animations
local function disableAllAnimations(character)
    if not character then return end
    
    -- Disable main Animate script
    local animate = character:FindFirstChild("Animate")
    if animate then
        animate.Disabled = true
        
        -- Disable all animation tracks
        for _, child in ipairs(animate:GetChildren()) do
            if child:IsA("StringValue") then
                child.Value = ""
            end
        end
    end
    
    -- Get Humanoid and stop all current animations
    local humanoid = character:FindFirstChild("Humanoid")
    if humanoid then
        -- Stop existing animations
        for _, track in ipairs(humanoid:GetPlayingAnimationTracks()) do
            track:Stop()
            track:Destroy()
        end
        
        -- Disable default animations
        humanoid.PlatformStand = true
        humanoid.AutoRotate = false
        
        -- Force idle animation state
        humanoid:ChangeState(Enum.HumanoidStateType.Physics)
    end
    
    -- Disable individual animation controllers
    for _, child in ipairs(character:GetChildren()) do
        if child:IsA("LocalScript") and child.Name:match("Controller") then
            child.Disabled = true
        end
    end
    
    -- Set gravity to 0 to prevent falling animation
    workspace.Gravity = 0
end

-- Function to restore animations
local function enableAllAnimations(character)
    if not character then return end
    
    local animate = character:FindFirstChild("Animate")
    if animate then
        animate.Disabled = false
    end
    
    local humanoid = character:FindFirstChild("Humanoid")
    if humanoid then
        humanoid.PlatformStand = false
        humanoid.AutoRotate = true
        humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
    end
    
    -- Re-enable animation controllers
    for _, child in ipairs(character:GetChildren()) do
        if child:IsA("LocalScript") and child.Name:match("Controller") then
            child.Disabled = false
        end
    end
    
    workspace.Gravity = 192.2
end

-- Function to track player respawn and handle retargeting
local function setupCharacterTracking()
    LocalPlayer.CharacterAdded:Connect(function(newCharacter)
        Character = newCharacter
        HumanoidRootPart = newCharacter:WaitForChild("HumanoidRootPart")
        
        if getgenv().facefuckactive then
            disableAllAnimations(newCharacter)
            targetHead = findNearestPlayer()
            if targetHead then
                task.spawn(function()
                    faceBang(targetHead)
                end)
            else
                print("No nearby player found!")
            end
        end
    end)
end

-- Function to find the nearest player
local function findNearestPlayer()
    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Head") then
        return targetPlayer.Character.Head
    end

    local nearestPlayer = nil
    local shortestDistance = math.huge

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0 then
            local head = player.Character:FindFirstChild("Head")
            if head then
                local distance = (HumanoidRootPart.Position - head.Position).Magnitude
                if distance < shortestDistance then
                    shortestDistance = distance
                    nearestPlayer = head
                    targetPlayer = player
                end
            end
        end
    end

    if targetPlayer then
        targetPlayer.CharacterAdded:Connect(function(newCharacter)
            if getgenv().facefuckactive then
                local head = newCharacter:WaitForChild("Head")
                targetHead = head
                faceBang(head)
            end
        end)
    end

    return nearestPlayer
end

-- Continuous animation prevention
local function setupAnimationPrevention()
    RunService.Heartbeat:Connect(function()
        if getgenv().facefuckactive and LocalPlayer.Character then
            local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
            if humanoid then
                -- Stop any new animations that might play
                for _, track in ipairs(humanoid:GetPlayingAnimationTracks()) do
                    track:Stop()
                end
                
                -- Maintain physics state
                humanoid.PlatformStand = true
                humanoid:ChangeState(Enum.HumanoidStateType.Physics)
            end
        end
    end)
end

-- Function to move and follow the target
local function faceBang(head)
    local function createTween(targetCFrame, isApproaching)
        local tweenInfo = TweenInfo.new(
            isApproaching and APPROACH_TWEEN_SPEED or TWEEN_SPEED,
            isApproaching and APPROACH_TWEEN_STYLE or TWEEN_STYLE,
            TWEEN_DIRECTION
        )

        local tween = TweenService:Create(HumanoidRootPart, tweenInfo, {
            CFrame = targetCFrame
        })
        return tween
    end

    while getgenv().facefuckactive do
        if not head or not head:IsDescendantOf(workspace) then
            if targetPlayer and targetPlayer.Character then
                head = targetPlayer.Character:WaitForChild("Head")
                targetHead = head
            else
                print("Target lost! Retargeting...")
                head = findNearestPlayer()
                if not head then
                    print("No nearby player found!")
                    task.wait(1)
                    continue
                end
            end
        end

        disableAllAnimations(LocalPlayer.Character)

        local distanceToTarget = (head.Position - HumanoidRootPart.Position).Magnitude
        local isApproaching = distanceToTarget > 3

        if isApproaching then
            local approachPos = head.CFrame * CFrame.new(0, HEIGHT_OFFSET, FOLLOW_DISTANCE) * CFrame.Angles(0, math.rad(180), 0)
            local tween = createTween(approachPos, true)
            tween:Play()
            tween.Completed:Wait()
        else
            local positions = {
                head.CFrame * CFrame.new(0, HEIGHT_OFFSET, FOLLOW_DISTANCE) * CFrame.Angles(0, math.rad(180), 0),
                head.CFrame * CFrame.new(0, HEIGHT_OFFSET, FOLLOW_DISTANCE - 0.25) * CFrame.Angles(0, math.rad(180), 0),
                head.CFrame * CFrame.new(0, HEIGHT_OFFSET, FOLLOW_DISTANCE - 0.5) * CFrame.Angles(0, math.rad(180), 0)
            }

            for _, pos in ipairs(positions) do
                if not getgenv().facefuckactive then break end
                
                local tween = createTween(pos, false)
                tween:Play()
                
                local completed = false
                tween.Completed:Connect(function()
                    completed = true
                end)
                
                local startTime = tick()
                while not completed and tick() - startTime < 1 do
                    task.wait()
                end
            end

            task.wait(0.05)
        end
    end

    enableAllAnimations(LocalPlayer.Character)
end

-- Function to toggle movement
local function toggleMovement()
    if not getgenv().facefuckactive then
        targetPlayer = nil
        targetHead = findNearestPlayer()
        
        if targetHead then
            getgenv().facefuckactive = true
            disableAllAnimations(LocalPlayer.Character)
            task.spawn(function()
                faceBang(targetHead)
            end)
        else
            print("No nearby player found!")
        end
    else
        getgenv().facefuckactive = false
        targetPlayer = nil
        targetHead = nil
        enableAllAnimations(LocalPlayer.Character)
    end
end

-- Function to create a mobile GUI button
local function createMobileGUI()
    if not UserInputService.TouchEnabled then return end
    
    if PlayerGui:FindFirstChild("FaceBangGui") then
        PlayerGui.FaceBangGui:Destroy()
    end

    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "FaceBangGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = PlayerGui

    local container = Instance.new("Frame")
    container.Size = UDim2.new(0, 45, 0, 45)
    container.Position = UDim2.new(0.95, -25, 0.1, 0)
    container.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    container.BorderSizePixel = 0
    container.Parent = screenGui

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0.2, 0)
    corner.Parent = container

    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(50, 50, 50)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(35, 35, 35))
    })
    gradient.Rotation = 45
    gradient.Parent = container

    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0.8, 0, 0.8, 0)
    button.Position = UDim2.new(0.5, 0, 0.5, 0)
    button.AnchorPoint = Vector2.new(0.5, 0.5)
    button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    button.TextColor3 = Color3.fromRGB(200, 200, 200)
    button.Text = "F"
    button.TextSize = 16
    button.Font = Enum.Font.GothamBold
    button.BorderSizePixel = 0
    button.Parent = container

    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0.2, 0)
    buttonCorner.Parent = button

    local status = Instance.new("Frame")
    status.Size = UDim2.new(0, 6, 0, 6)
    status.Position = UDim2.new(1, -4, 0, 4)
    status.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
    status.BorderSizePixel = 0
    status.Parent = container

    local statusCorner = Instance.new("UICorner")
    statusCorner.CornerRadius = UDim.new(1, 0)
    statusCorner.Parent = status

    button.MouseEnter:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {
            BackgroundColor3 = Color3.fromRGB(70, 70, 70)
        }):Play()
    end)

    button.MouseLeave:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {
            BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        }):Play()
    end)

    button.MouseButton1Click:Connect(function()
        toggleMovement()
        status.BackgroundColor3 = getgenv().facefuckactive and Color3.fromRGB(50, 255, 50) or Color3.fromRGB(255, 50, 50)
    end)
end

-- Add keybind for PC users
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.Z then
        toggleMovement()
        -- Update mobile GUI status if it exists
        local gui = PlayerGui:FindFirstChild("FaceBangGui")
        if gui then
            local status = gui.Frame:FindFirstChild("Frame")
            if status then
                status.BackgroundColor3 = getgenv().facefuckactive and Color3.fromRGB(50, 255, 50) or Color3.fromRGB(255, 50, 50)
            end
        end
    end
end)

-- Initialize everything
setupCharacterTracking()
setupAnimationPrevention()
createMobileGUI()
